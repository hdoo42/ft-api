// use std::{
//     collections::HashMap,
//     io::Write,
//     ops::Deref,
//     sync::Arc,
// };
//
// use chrono::Utc;
// use libft_api::prelude::*;
// use tokio::{sync::Semaphore, task::JoinSet};
// use tracing::{debug, info};
//
// #[tokio::main]
// async fn main() -> Result<(), Box<dyn std::error::Error>> {
//     tracing_subscriber::fmt::init();
//     let thread_num = 7;
//     let permit = Arc::new(Semaphore::new(thread_num));
//
//     // 3rd cohort piscine first round
//     // let ids = [
//     //     212531, 212530, 212529, 212528, 212527, 212526, 212525, 212524, 212523, 212522, 212521,
//     //     212520, 212519, 212518, 212517, 212516, 212515, 212514, 212513, 212512, 212511, 212510,
//     //     212509, 212508, 212507, 212506, 212505, 212504, 212503, 212502, 212501, 212500, 212499,
//     //     212498, 212497, 212496, 212495, 212494, 212493, 212492, 212491, 212490, 212489, 212488,
//     //     212487, 212486, 212485, 212484, 212483, 212482, 212481, 212480, 212479, 212478, 212477,
//     //     212476, 212475, 212474, 212473, 212472, 212471, 212470, 212469, 212468, 212467, 212466,
//     //     212465, 212464, 212463, 212462, 212461, 212460, 212459, 212458, 212457, 212456, 212455,
//     //     212454, 212453, 212452, 212638, 212637, 212629, 212628, 212627, 212626, 212625, 212624,
//     //     212623, 212622, 212621, 212620, 212619, 212618, 212617, 212616, 212615, 212614, 212613,
//     //     212612, 212611, 212610, 212609, 212608, 212607, 212606, 212605, 212604, 212603, 212602,
//     //     212601, 212600, 212599, 212598, 212597, 212596, 212595, 212594, 212593, 212592, 212591,
//     //     212590, 212589, 212588, 212587, 212586, 212585, 212584, 212583, 212582, 212581, 212580,
//     //     212579, 212578, 212577, 212576, 212575, 212574, 212573, 212572, 212571, 212570, 212569,
//     //     212568, 212567, 212566, 212565, 212564, 212563, 212562, 212561, 212560, 212559, 212558,
//     //     212557, 212556, 212555, 212554, 212553, 212552, 212551, 212550, 212549, 212548, 212547,
//     //     212546, 212545, 212544, 212543, 212542, 212541, 212540, 212539, 212538, 212537, 212536,
//     //     212535, 212534, 212533, 212532,
//     // ]
//     // .map(FtUserId::new);
//
//     let ids = [
//         172410, 197482, 190887, 172305, 172353, 197422, 197429, 190783, 197456, 190848, 190815,
//         172394, 174189, 190846, 174084, 190820, 172357, 190800, 197497, 172418, 172352, 172349,
//         197528, 190909, 174169, 197496, 174101, 197397, 174128, 174104, 174127, 174112, 197454,
//         174184, 197455, 197495, 197484, 172327, 197507, 190797, 197498, 197444, 174097, 190898,
//         172325, 174113, 172307, 174153, 172346, 172356, 190862, 197402, 174156, 190839, 197518,
//         197483, 174185, 174152, 174145, 197459, 197504, 174131, 190847, 197523, 197521, 197511,
//         197406, 197403, 172364, 197486, 172362, 190795, 190802, 197525, 174188, 197457, 190806,
//         174089, 174135, 174129, 197400, 190817, 174081, 174147, 197489, 172308, 197463, 190913,
//         197437, 197605, 172400, 197516, 190885, 197449, 174161, 174186, 174110, 197439, 190838,
//         172329, 190870, 172370, 174085, 174111, 190849, 172416, 190876, 197606, 197519, 174138,
//         174149, 172413, 190845, 197527, 190895, 174168, 174137, 172414, 190832, 197537, 172375,
//         197441, 174151, 190808, 197472, 172390, 197520, 190843, 172348, 172392, 190896, 172389,
//         197448, 197417, 174139, 190907, 172335, 174095, 197494, 190910, 190816, 197445, 197541,
//         174130, 174150, 190823, 197467, 190821, 190784, 190926, 174142, 197421, 197420, 174093,
//         197435, 197453, 197530, 174102, 190886, 190861, 174103, 197447, 174123, 174099, 174096,
//         174178, 172350, 197543, 197474, 174117, 172402, 172324, 172367, 190790, 197490, 190803,
//         174133, 197529, 190855, 197428, 197542, 197499, 190837, 190865, 174154, 197547, 197501,
//         190812, 190818, 197418, 172310, 190836, 197540, 172342, 190869, 197407, 197533, 190911,
//         197487, 172318, 190903, 190831, 190937, 174109, 174115, 190854, 190866, 174181, 190813,
//         174091, 172361, 172344, 190785, 197505, 197532, 197531, 172309, 172323, 174157, 197514,
//         190791, 174105, 190810, 174183, 190794, 197395, 197458, 197481, 190905, 197412, 174086,
//         197548, 197536, 172351, 190829, 174165, 197503, 172385, 172404, 197526, 172365, 197399,
//         197538, 172401, 197409, 174119, 174083, 174177, 197539, 197432, 190874, 190844, 172319,
//         174141, 190786, 174087, 172378, 190883, 172396, 174160, 190884, 174092, 174132, 197442,
//         197398, 174190, 190853, 172330, 197413, 197469, 174094, 172366, 172368, 172322, 197427,
//         174120, 197408, 197425, 172360, 197434, 172399, 173488,
//     ]
//     .map(FtUserId::new);
//
//     Ok(())
// }
//
// async fn save_location_stat(
//     ids: Arc<Vec<FtUserId>>,
//     permit: Arc<Semaphore>,
// ) -> Result<(), Box<dyn std::error::Error>> {
//     let mut handles = JoinSet::new();
//
//     for id in ids.clone().deref().clone() {
//         let permit = Arc::clone(&permit);
//         handles.spawn(async move {
//             let _permit = permit.acquire().await.unwrap();
//             loop {
//                 if let Ok(res) = get_location_stat(&id).await {
//                     debug!("{id}: {:?}", res.stats.len());
//                     break (id, res);
//                 }
//             }
//         });
//     }
//
//     let mut location_stats = HashMap::new();
//     while let Some(Ok((id, res))) = handles.join_next().await {
//         location_stats.entry(id).or_insert(res);
//         info!("{}", location_stats.len());
//     }
//
//     let file_path = format!(
//         "/Users/hdoo/works/gsia/codes/libft-api/libft-api/bin/piscine/third_cohort/first_round/location_stats_{}.csv",
//         Utc::now().format("%Y-%m-%d_%H-%M-%S")
//     );
//
//     let mut file = std::fs::File::create(&file_path).expect("Failed to create output file");
//
//     file.write_all("intra_id,date,time\n".as_bytes())?;
//
//     for (intra_id, location_stat) in location_stats {
//         for (date, time) in location_stat.stats {
//             writeln!(file, "{},{},{}", intra_id, date, time).expect("Failed to write record");
//         }
//     }
//
//     println!("Output written to: {}", file_path);
//     Ok(())
// }
//
// async fn get_location_stat(id: &FtUserId) -> ClientResult<FtApiUsersIdLocationsStatsResponse> {
//     let token = FtApiToken::try_get(AuthInfo::build_from_env().unwrap())
//         .await
//         .unwrap();
//     let client = FtClient::new(FtClientReqwestConnector::new());
//     let session = Arc::new(client.open_session(&token));
//     let res = session
//         .users_id_locations_stats(
//             FtApiUsersIdLocationsStatsRequest::new(id.clone())
//                 .with_begin_at("2024-1-1".parse().unwrap())
//                 .with_end_at("2025-3-1".parse().unwrap()),
//         )
//         .await;
//     debug!("{:?}", res);
//     res
// }
